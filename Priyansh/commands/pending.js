//@ARIF BABU V2
////////////////////////////////////////////////////////
/////// WARNING => JO CREDIT NAME CHANGE KREGA USKA ID BAN KAR DIYA JAYEGA + THIS BOT IS MADE BT ARIF BABU
module.exports.config = {
        name: "pending",
        version: "1.0.5",
        credits: "ARIF BABU",
        hasPermssion: 2,
        description: "MADE BY ARIF BABU",
        commandCategory: "SYSTEM",
        cooldowns: 5
};

module.exports.languages = {
    "vi": {
        "returnListPending": "тЭБ тФБтФБтФБ[ЁЭРПЁЭРДЁЭРНЁЭРГЁЭРИЁЭРНЁЭРЖ]тФБтФБтФБ тЭБ\nTс╗Хng sс╗С nh├│m cс║зn duyс╗Зt: {%1} nh├│m\n\n{%2}",
        "returnListClean": "PENDING Hiс╗Зn tс║бi kh├┤ng c├│ nh├│m n├аo trong h├аng chс╗Э"
    },
    "en": {
        "invaildNumber": "%1 рдмреЙрд╕ рдЖрдк рдЧреНрд░реБрдк рдЗрдЧреНрдиреЛрд░ рд╕реЗ рдирд┐рдХрд▓рдирд╛ рднреВрд▓ рдЧрдП рд╣реЛ ЁЯШнЁЯСИ",
        "cancelSuccess": "Refused {%1} thread!",
        "notiBox": "рдореЗрд░реЗ рдмреЙрд╕ рд╕реБрд╣реЗрдм рдЦрд╛рди рдиреЗ рдЕрдкреНрд░реВрд╡рд▓ рджреЗ рджрд┐рдпрд╛ рд╣реИрдВ рдФрд░ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП ЁЯСЙ#help to рдФрд░ #help2ЁЯСИрд▓рд┐рдЦреЗрдВ рдзрдиреНрдпрд╡рд╛рдж ЁЯШ╣ЁЯСИ",
        "approveSuccess": "рдмреЙрд╕ рдЖрдкрдиреЗ рдЕрдкреНрд░реВрд╡рд▓ рджреЗ рджрд┐рдпрд╛ рд╣реИ %1 ЁЯЩВЁЯдЮ",

        "returnListPending": "тЭБ тФБтФБтФБ[ЁЭРПЁЭРДЁЭРНЁЭРГЁЭРИЁЭРНЁЭРЖ]тФБтФБтФБ тЭБ\n\nрдЗрддрдиреЗ рдЧреНрд░реБрдк рдЖрдк рдХреЗ рдкреИрдбрд┐рдВрдЧ рдореИ рд╣реИрдВ рдмреЙрд╕ рд╕рд┐рд▓реЗрдХреНрдЯ реШрд░ рд▓реЛ ЁЯНО {%1} рдорд╛рд▓рд┐рдХ\n%2",
        "returnListClean": "тЭБ тФБтФБтФБ[ЁЭРПЁЭРДЁЭРНЁЭРГЁЭРИЁЭРНЁЭРЖ]тФБтФБтФБ тЭБ\n\nрдорд╛рд▓рд┐рдХ рдЖрдк рдХреЗ рдЧреНрд░реБрдк рдкреЗрдВрдбрд┐рдВрдЧ рдореИ рдирд╣реАрдВ рд╣реИрдВ рдЕрдм рдЦреБрд╢ рд╣реЛ рдЬрд╛рдУ рдмреЙрд╕ ЁЯШ╣ЁЯСИ"
    }
}
///////////////////////////////////////////////@ARIFBABU//////////

module.exports.handleReply = async function({ api, event, handleReply, getText }) {
    if (String(event.senderID) !== String(handleReply.author)) return;
    const { body, threadID, messageID } = event;
    var count = 0;

    if (isNaN(body) && body.indexOf("c") == 0 || body.indexOf("cancel") == 0) {
        const index = (body.slice(1, body.length)).split(/\s+/);
        for (const singleIndex of index) {
            console.log(singleIndex);
            if (isNaN(singleIndex) || singleIndex <= 0 || singleIndex > handleReply.pending.length) return api.sendMessage(getText("invaildNumber", singleIndex), threadID, messageID);
            api.removeUserFromGroup(api.getCurrentUserID(), handleReply.pending[singleIndex - 1].threadID);
            count+=1;
        }
        return api.sendMessage(getText("cancelSuccess", count), threadID, messageID);
    }
    else {
        const index = body.split(/\s+/);
        for (const singleIndex of index) {
            if (isNaN(singleIndex) || singleIndex <= 0 || singleIndex > handleReply.pending.length) return api.sendMessage(getText("invaildNumber", singleIndex), threadID, messageID);
            api.sendMessage(getText("notiBox"), handleReply.pending[singleIndex - 1].threadID);
            count+=1;
        }
        return api.sendMessage(getText("approveSuccess", count), threadID, messageID);
    }
}

module.exports.run = async function({ api, event, getText }) {
        const { threadID, messageID } = event;
    const commandName = this.config.name;
    var msg = "", index = 1;

    try {
                var spam = await api.getThreadList(100, null, ["OTHER"]) || [];
                var pending = await api.getThreadList(100, null, ["PENDING"]) || [];
        } catch (e) { return api.sendMessage(getText("cantGetPendingList"), threadID, messageID) }

        const list = [...spam, ...pending].filter(group => group.isSubscribed && group.isGroup);

    for (const single of list) msg += `тЬ░ ${index++}\n ${single.name}\n (${single.threadID})\nтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n`;

    if (list.length != 0) return api.sendMessage(getText("returnListPending", list.length, msg), threadID, (error, info) => {
                global.client.handleReply.push({
            name: commandName,
            messageID: info.messageID,
            author: event.senderID,
            pending: list
        })
        }, messageID);
    else return api.sendMessage(getText("returnListClean"), threadID, messageID);
}
